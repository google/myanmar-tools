namespace MyanmarTools.Transliterate
{
    /// <summary>
    /// Transliteration initialization of Phases and rules.
    /// Note: this is generated by compiling ICU transliteration rule format.
    /// Source rule file = genconvert/input/my_normalize_zawgyi_transliteration_rules.txt
    /// </summary>
    public class TransliterateZNorm : Transliterate
    {
        public TransliterateZNorm(string name) : base(name)
        {
            // Rules for Phase 0
            var Phase0 = AddPhase();
            Phase0.AddRule(new Rule("\u1009\u1039", "\u1025\u1039"));
            Phase0.AddRule(new Rule("\u1025\u102E", "\u1026"));
            Phase0.AddRule(new Rule("\u102F([\u102D\u1036])", "$1\u102F"));
            Phase0.AddRule(new Rule("\u1039([\u1037\u1094\u1095])", "$1\u1039"));
            Phase0.AddRule(new Rule("\u103C([\u102E\u1032])", "$1\u103C"));
            Phase0.AddRule(new Rule("\u1033\u102D", "\u102D\u1033"));
            Phase0.AddRule(new Rule("\u103D\u102D", "\u102D\u103D"));
            Phase0.AddRule(new Rule("\u1089", "\u103D\u1034"));
            Phase0.AddRule(new Rule("\u1064\u103A", "\u103A\u1064"));
            Phase0.AddRule(new Rule("\u1067", "\u1066"));
            Phase0.AddRule(new Rule("\u1072", "\u1071"));
            Phase0.AddRule(new Rule("\u1074", "\u1073"));
            Phase0.AddRule(new Rule("\u1093", "\u107B"));

            // Rules for Phase 1
            var Phase1 = AddPhase();
            Phase1.AddRule(new Rule("\u102D+", "\u102D"));
            Phase1.AddRule(new Rule("\u102E+", "\u102E"));
            Phase1.AddRule(new Rule("\u102F+", "\u102F"));
            Phase1.AddRule(new Rule("\u1030+", "\u1030"));
            Phase1.AddRule(new Rule("\u1032+", "\u1032"));
            Phase1.AddRule(new Rule("\u1033+", "\u1033"));
            Phase1.AddRule(new Rule("\u1034+", "\u1034"));
            Phase1.AddRule(new Rule("\u1036+", "\u1036"));
            Phase1.AddRule(new Rule("\u1037+", "\u1037"));
            Phase1.AddRule(new Rule("\u1039+", "\u1039"));
            Phase1.AddRule(new Rule("\u103A+", "\u103A"));
            Phase1.AddRule(new Rule("\u103B+", "\u103B"));
            Phase1.AddRule(new Rule("\u103C+", "\u103C"));
            Phase1.AddRule(new Rule("\u103D+", "\u103D"));
            Phase1.AddRule(new Rule("\u103E+", "\u103D"));

            // Rules for Phase 2
            var Phase2 = AddPhase();
            Phase2.AddRule(new Rule("[\u1037\u1094\u1095]+", "\u1037"));
            Phase2.AddRule(new Rule("\u1005\u103A", "\u1008"));
            Phase2.AddRule(new Rule("\u101D", "\u1040"));
            Phase2.AddRule(new Rule("\u104E$", "\u1044"));
            Phase2.AddRule(new Rule("\u102F\u1088", "\u1088"));
            Phase2.AddRule(new Rule("\u103B\u103A", "\u103A\u103B"));
            Phase2.AddRule(new Rule("\u103D\u102F", "\u1088"));
            Phase2.AddRule(new Rule("\u103D\u1088", "\u1088"));
            Phase2.AddRule(new Rule("\u103B([\u1000-\u1021])\u103B$", "\u103B$1"));

            // Rules for Phase 3
            var Phase3 = AddPhase();
            Phase3.AddRule(new Rule("[\u103B\u107E-\u1084]+", "\u103B"));
            Phase3.AddRule(new Rule("\u1031\u1031+", "\u1031"));

            // Rules for Phase 4
            var Phase4 = AddPhase();
            Phase4.AddRule(new Rule("([\u103B\u107E-\u1084])([\u1000-\u1021])\u1036\u102F", "$1$2\u1033\u1036"));

            // Rules for Phase 5
            var Phase5 = AddPhase();
            Phase5.AddRule(new Rule("\u1033", "\u102F"));

            // Rules for Phase 6
            var Phase6 = AddPhase();
            Phase6.AddRule(new Rule("\u1036\u102F", "\u102F\u1036"));
            Phase6.AddRule(new Rule("\u1037\u1039\u1037", "\u1037\u1039"));
            Phase6.AddRule(new Rule("\u106B", "\u100A"));

            // Rules for Phase 7
            var Phase7 = AddPhase();
            Phase7.AddRule(new Rule("[    -‍⁠  　﻿]+([\u1000-\u109F])", "$1")
                .SetRevisitPosition(0));
            Phase7.AddRule(new Rule("\u200B+", "")
                .SetMatchOnStart());
            Phase7.AddRule(new Rule("\u200B+$", ""));
        }

    }
}